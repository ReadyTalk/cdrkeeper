plugins {
  id 'java'
  id 'com.github.johnrengelman.shadow' version '2.0.3'
  id 'application'
  id 'maven'
  id 'eclipse'
}

repositories {
  mavenCentral()
}

mainClassName = 'com.ecovate.cdrkeeper.CDRKeeper'

applicationName = 'cdrkeeper'
version=new File("${project.rootDir}/VERSION").text.trim()

sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {
  testCompile('junit:junit:4.12')

  compile (
    "com.google.code.gson:gson:2.8.5",
    "net.sourceforge.argparse4j:argparse4j:0.8.1",
    "org.slf4j:slf4j-api:1.7.21",
    "org.slf4j:slf4j-simple:1.7.21",
    "org.threadly:threadly:6.0",
    "org.threadly:litesockets-http-server:0.27",
    "org.threadly:litesockets-http-protocol:0.27",
    "org.threadly:litesockets:4.14",
    "org.jdbi:jdbi3-core:3.4.0",
    "com.zaxxer:HikariCP:3.2.0",
    "org.threadly:auroraArc-mysql:0.13",
    "mysql:mysql-connector-java:8.0.11",
    "io.prometheus:simpleclient_servlet:0.8.1",
    "io.prometheus:simpleclient_hotspot:0.8.1",

  )
}

test {
  getReports().getJunitXml().setDestination(file("${buildDir}/reports/tests/xml"))
  getReports().getHtml().setDestination(file("${buildDir}/reports/tests/html"))
  setBinResultsDir(file("${buildDir}/reports/tests/bin"))
}

javadoc {
  source = sourceSets.main.allJava
  options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PUBLIC
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

jar {
    baseName "cdrkeeper"
}
shadowJar {
  archiveName "cdrkeeper-${version}-all.jar"
}
